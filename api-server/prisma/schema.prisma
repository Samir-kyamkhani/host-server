generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DeploymentStatus {
  QUEUED
  RUNNING
  SUCCESS
  FAILED
}

enum DomainStatus {
  PENDING
  VERIFIED
  FAILED
  BLOCKED
}

enum DomainType {
  A
  CNAME
  TXT
}

enum PlanType {
  FREE
  STARTER
  PRO
}

model User {
  id                String   @id @default(uuid())
  fullName          String
  username          String   @unique
  email             String   @unique
  password          String?
  provider          String?
  providerId        String?
  githubAccessToken String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  projects     Project[]
  subscription Subscription?
}

model Subscription {
  id               String    @id @default(uuid())
  userId           String    @unique
  razorpayId       String    @unique
  plan             PlanType  @default(FREE)
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id        String   @id @default(cuid())
  name      String
  framework String?
  gitUrl    String   @unique @map("git_url")
  subdomain String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  deployments   Deployment[]
  customDomains CustomDomain[]
  domainLogs    DomainLog[]
  DeploymentLog DeploymentLog[]
}

model Deployment {
  id                String           @id @default(uuid())
  projectId         String
  status            DeploymentStatus @default(QUEUED)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  containerUrl      String?
  taskDefinitionArn String?
  taskArn           String?

  project Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  logs    DeploymentLog[]
}

model DeploymentLog {
  id           String     @id @default(uuid())
  deploymentId String
  log          String
  createdAt    DateTime   @default(now())
  projectId    String
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
}

model CustomDomain {
  id                String       @id @default(uuid())
  domain            String       @unique
  type              DomainType   @default(A)
  status            DomainStatus @default(PENDING)
  verificationToken String
  verifiedAt        DateTime?
  isPrimary         Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model DomainLog {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
