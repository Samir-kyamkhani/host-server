generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DeploymentStatus {
  NOT_STARTED
  QUEUED
  IN_PROGRESS
  READY
  FAILED
}

enum DomainStatus {
  PENDING
  VERIFIED
  FAILED
  BLOCKED
}

enum DomainType {
  A
  CNAME
  TXT
}

enum PlanType {
  FREE
  STARTER
  PRO
}

model User {
  id         String   @id @default(uuid())
  fullName   String
  username   String   @unique
  email      String   @unique
  password   String
  provider   String? // e.g. "github", "email"
  providerId String? // GitHub or Google ID
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  projects     Project[]
  subscription Subscription?
}

model Subscription {
  id               String    @id @default(uuid())
  userId           String    @unique
  razorpayId       String    @unique
  plan             PlanType  @default(FREE)
  status           String // active, cancelled, etc.
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Project {
  id        String   @id @default(uuid())
  name      String
  gitUrl    String   @unique @map("git_url")
  subdomain String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId        String
  user          User           @relation(fields: [userId], references: [id])
  deployments   Deployment[]
  customDomains CustomDomain[]
  domainLogs    DomainLog[]
}

model Deployment {
  id        String           @id @default(uuid())
  projectId String           @map("project_id")
  status    DeploymentStatus @default(NOT_STARTED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())

  project Project @relation(fields: [projectId], references: [id])
}

model CustomDomain {
  id                String       @id @default(uuid())
  domain            String       @unique // e.g. www.example.com
  type              DomainType   @default(A) // CNAME or A record
  status            DomainStatus @default(PENDING)
  verificationToken String // DNS TXT record
  verifiedAt        DateTime?
  isPrimary         Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

model DomainLog {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}
